const fs = require("fs");
const csv = require("csv-parser");
const { forEach } = require("ramda");

const token =
  "eyJraWQiOiJcL2RzUHFjUFNtRURkaUZSVGJheU1OQmFvczNWVFg3SmdXYTJBY2RubnNxUT0iLCJhbGciOiJSUzI1NiJ9.eyJzdWIiOiJkZTFkODA3ZS02MTlhLTRmYTUtYTE2ZS01YzM3N2U3ODI3YTMiLCJjb2duaXRvOmdyb3VwcyI6WyJhcC1zb3V0aC0xXzB1R2FLb1VscF9Hb29nbGUiXSwiaXNzIjoiaHR0cHM6XC9cL2NvZ25pdG8taWRwLmFwLXNvdXRoLTEuYW1hem9uYXdzLmNvbVwvYXAtc291dGgtMV8wdUdhS29VbHAiLCJ2ZXJzaW9uIjoyLCJjbGllbnRfaWQiOiJzYzc1OTBiaWRvcHJidDIwZDRyZW51dTBoIiwidG9rZW5fdXNlIjoiYWNjZXNzIiwic2NvcGUiOiJhd3MuY29nbml0by5zaWduaW4udXNlci5hZG1pbiBwaG9uZSBvcGVuaWQgcHJvZmlsZSBlbWFpbCIsImF1dGhfdGltZSI6MTcwMTQzNTkwNCwiZXhwIjoxNzAxODY5ODcyLCJpYXQiOjE3MDE4NjYyNzIsImp0aSI6IjRhZjgwMzU4LWRjOWUtNGE3NS04OWJmLTRkOTFjNmVmZWFlNiIsInVzZXJuYW1lIjoiR29vZ2xlXzExNTUxNTI0MzQzNzQ3NTc4MjI2MSJ9.JCRgtjQfqlnm1WrJsUUQIYD0XfTDXn_ll0-mqBDgjILHaR0ppIXrw5hqHq-gsvksTZYptGJ3oQD5wrafQJVfOdOjR3vTw_DKW4ZzjLaJIFv7rW2Wq1T-2BFyc50VP6MkOjtQDFJoxya0E0K0CQ9FwALYccZvYeS0MqE0jCztZCAQTc5yWYc85RUXhzQdYuzjmv2cHhZ4l4M_pAfVNSl7-_edojuyhGlqPvan3sNu45_yPcid29eBOHLoyw_R257cUpGSUGMEsGi5wo26pWByeKql_qMUc9eDvCFXoh69Um1lrr7B0k_cl_c64gaWAzIiUa7Q-B-6sp2Qm5VLf83qNw";
const callApi = async (payload) => {
  try {
    const response = await fetch(
      "https://hermes.zolostays.com/api/urls/",
      {
        method: "POST",
        headers: {
          "Content-Type": "application/json",
          Authorization: `Bearer ${token}`,
        },
        body: JSON.stringify(payload),
      }
    );
    const data = await response.json();
    console.log("data amandeep", data);
  } catch (err) {
    console.log(`err in creating this url ${payload.urlPath}`, err);
  }
};


const filePath = "./results2/pageTypeInLocalityCityMapping.csv";
async function processCSV(filePath) {
  try {
    const results = [];

    await new Promise((resolve, reject) => {
      fs.createReadStream(filePath)
        .pipe(csv())
        .on("data", (data) => {
          // filter out the urls which are not valid
          if (
            !data.url.includes("%") &&
            !data.url.includes(":") &&
            !data.url.includes(")")
          ) {
            results.push({ url: data.url });
          }
        })
        .on("end", () => {
          resolve();
        })
        .on("error", (error) => {
          reject(error);
        });
    });
    console.log("results inside", results);
    return results;
  } catch (error) {
    console.error("Error reading or processing the CSV file:", error);
  }
}

processCSV(filePath).then((urlsToBeCreated) => {
  urlsToBeCreated.map(async (urlObj) => {
    console.log(urlObj.url);
    const payload = {
      isLive: true,
      isAutoGenerated: false,
      defaultValue: true,
      urlPath: `${urlObj.url}`,
      urlType: "",
      createdAt: "",
      updatedAt: "",
      updatedBy: "",
    };
    //   await callApi(payload);
  });
});


//! testing for one url in prod starts done.
// const urlsToBeCreated = [
//     {
//         url: "hostels-in-s_g_palya-bangalore"
//     }
// ]
// urlsToBeCreated.map(async (urlObj) => {
//     const payload = {
//       isLive: false,
//       isAutoGenerated: false,
//       defaultValue: true,
//       urlPath: `${urlObj.url}`,
//       urlType: "",
//       createdAt: "",
//       updatedAt: "",
//       updatedBy: "",
//     };
//       await callApi(payload);
//   });
//! testing for one url in prod ends done.
